Black Friday Problem 2 (1 / 3)

Еден маркет за бела технка одлучил да ги спушти цените на своите производи еден работен петок дури до 80% по повод 
престојните Божикни празници. Поради оваа промоција јасно им било дека ќе има многу заинтересирани купувачи,
па затоа одлучиле да воспостaват ред при влеувањето/излегувањето во маркетот. Купувачите влегуваат според времето на пристигнување.
Потребно е да се пронајде колкав е максималниот број на купувачи кои ќе бидат присутни во маркетот.
Во првата линија е даден бројот на купувачи кои чекаат да влезат, N. Секоја од наредните линии го означува часот и минутите на
доаѓање на купувачот, како и колку време (во минути) ќе се задржи во маркетот, во формат: HH:MM d
За да се реализира оваа задача потребно е да се користи соодветна податочна структура со која со најмала сложеност ќе се постигне
бараниот резултат. Притоа е обезбедено да не може да се случи во ист момент да има влегување односно излегување од маркетот. 
Маркетот работи до 23:59.

На излез треба да се испечати максималниот број купувачи кои што истовремено ќе бидат присутни во маркетот.

Име на класа во Java: BlackFriday
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.NoSuchElementException;
 
 class Heap<E extends Comparable<E>> {
   
    private E elements[];
 
   
    @SuppressWarnings("unchecked")
    public Heap(int size) {
        elements = (E[])new Comparable[size];
    }
   
   
   
    int getParent(int i) {
        return (i+1)/2-1;
    }
   
    public E getAt(int i) {
        return elements[i];
    }
   
    int getLeft(int i) {
        return (i+1)*2-1;
    }
   
    int getRight(int i) {
        return (i+1)*2;
    }
   
    void setElement(int index, E elem) {
        elements[index] = elem;
    }
   
    void swap(int i, int j) {
        E tmp = elements[i];
        elements[i] = elements[j];
        elements[j] = tmp;
    }
   
    void adjust(int i, int n){
       
        while (i < n) {
           
            int left = getLeft(i);
            int right = getRight(i);
            int largest = i;
           
            if ((left < n)&&(elements[left].compareTo(elements[largest]) > 0))
                largest = left;
            if ((right < n)&&(elements[right].compareTo(elements[largest]) > 0))
                largest = right;
           
            if (largest == i)
                break;
           
            swap(i, largest);
            i = largest;
           
        }
       
    }
   
    void buildHeap() {
        int i;
        for (i=elements.length/2-1;i>=0;i--)
            adjust(i, elements.length);
    }
   
    public void heapSort() {
        int i;
        buildHeap();
        for (i=elements.length-1;i>0;i--) {
            swap(0, i);
            adjust(0, i);
        }
    }
   
 
 
   
}
 
 class Entry implements Comparable<Entry>{
         protected int vlez;
        protected int prestoj;
         
         public Entry(int v,int p)
         {
                 vlez=v;
                 prestoj=p;
         }
         
         public int vkupno()
         {
                 return vlez+prestoj;
         }
 
        @Override
        public int compareTo(Entry e) {
                if(vlez>e.vlez)
                        return 1;
                else if (vlez<e.vlez)
                        return -1;
                else return 0;
        }
         
         
 }
public class BlackFriday {
       
        public static void main(String[] args) throws Exception{
       
        Scanner br=new Scanner(System.in);
       
        int N=Integer.parseInt(br.nextLine());
       
        Heap<Entry> heapDrvo=new Heap <Entry>(N);
       
        for(int i=0;i<N;i++){
                String s=br.nextLine();
                String pom[]=s.split(" ");
               
                String cas[]=pom[0].split(":");
                int vlez=Integer.parseInt(cas[0])*60+Integer.parseInt(cas[1]);
                int prestoj=Integer.parseInt(pom[1]);
               
                Entry nov=new Entry(vlez,prestoj);
                heapDrvo.setElement(i, nov);
               
               
        }
       
        heapDrvo.heapSort();
       
        ArrayList<Entry>lista=new ArrayList(0);
        int max=0;
       
        for(int i=0;i<N;i++)
                {
                        for(int j=0;j<lista.size();j++)
                        {
                                if(lista.get(j).vkupno() < heapDrvo.getAt(i).vlez)
                                        lista.remove(j);
                        }
                        lista.add(heapDrvo.getAt(i));
                        if(lista.size()>max)
                                max=lista.size();
                }
       
        System.out.println(max);
       
        br.close();
        }
       
}
